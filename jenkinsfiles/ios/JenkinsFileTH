pipeline {
   agent { label 'mac_server_05'}
   environment {
      APPIUM_PORT_MANGO_01= 4850
      APPIUM_PORT_MANGO_02= 4852
      APPIUM_PORT_MANGO_03= 4856
      APPIUM_PORT_MANGO_04= 4858
      SIMULATOR_MANGO_01= 'Mango01'
      SIMULATOR_MANGO_02= 'Mango02'
      SIMULATOR_MANGO_03= 'Mango03'
      SIMULATOR_MANGO_04= 'Mango04'
      EMULATOR_STOP= 'Mango'
      JOB_GIT_URL= 'https://gitlab.com/doppiotech/dumbledore.git'
      JOB_GIT_BRANCH= 'main'
      GIT_CREDENTIAL= 'jenkins_makro_sso'
      APP_VER = "${APP_VERSION}"
      RP_UUID = '497f76de-ed96-4c75-96b3-73900e628ab8'
      RP_ENDPOINT ='http://10.88.9.127:8080'
      RP_LAUNCH = 'superadmin_TEST_EXAMPLE'
      RP_PROJECT= 'maknet-automation'

      REPORT_TYPE= 'robot'
      HOST_NAME='http://report.doppio-tech.com'
      REPORT_SEVER_PATH= "$WORKSPACE/output.xml"
   }
   stages {
      stage('KILL ALL EMULATORs and appium') {
         when {
            expression { params.RUN_ON_BROWSER_STACK == false }
         }
         steps{
            script{
               try {
                  echo "Stoping all iOS emulator"
                  sh label: '', script: 'xcrun simctl shutdown all'
               } catch (err) {
                  echo "kill : not enough arguments"
               }
            }
            script{
               try {
                  echo "STOP ALL ANDROID EMULATOR BY NAME"
                  sh label: '', script: 'kill -9 $(ps aux | grep \'qemu-system-\' |grep \'${EMULATOR_STOP}\' | awk \'{print $2}\')'
               } catch (err) {
                  echo "kill : not enough arguments"
               }
            }
            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_01})  ||  echo  \'Appuim Server Port :  4850 is Stop \''
            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_02})  ||  echo  \'Appuim Server Port :  4852 is Stop \''
            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_03})  ||  echo  \'Appuim Server Port :  4856 is Stop \''
            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_04})  ||  echo  \'Appuim Server Port :  4858 is Stop \''

            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_01})  ||  echo  \'Appuim Server Port :  4850 is Stop \''
            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_02})  ||  echo  \'Appuim Server Port :  4852 is Stop \''
            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_03})  ||  echo  \'Appuim Server Port :  4856 is Stop \''
            sh label: '', script: 'kill $(lsof -t -i :${APPIUM_PORT_MANGO_04})  ||  echo  \'Appuim Server Port :  4858 is Stop \''
         }
      }
      stage('START APPIUM PORT') {
         when {
            expression { params.RUN_ON_BROWSER_STACK == false }
         }
         steps {
            echo "Start Appium Port .."
            sh "appium --port ${APPIUM_PORT_MANGO_01} &"
            sh "appium --port ${APPIUM_PORT_MANGO_02} &"
            sh "appium --port ${APPIUM_PORT_MANGO_03} &"
            // sh "appium --port ${APPIUM_PORT_MANGO_04} &"
         }
      }
      stage('Start Emulator') {
         when {
            expression { params.RUN_ON_BROWSER_STACK == false }
         }
         steps{
            sh "xcrun simctl boot ${SIMULATOR_MANGO_01} > log.txt &"
            echo    "Simulator ${SIMULATOR_MANGO_01} Start"
            sh "xcrun simctl boot ${SIMULATOR_MANGO_02} > log.txt &"
            echo    "Simulator ${SIMULATOR_MANGO_02} Start"
            sh "xcrun simctl boot ${SIMULATOR_MANGO_03} > log.txt &"
            echo    "Simulator ${SIMULATOR_MANGO_03} Start"
            // sh "xcrun simctl boot ${SIMULATOR_MANGO_04} > log.txt &"
            // echo    "Simulator ${SIMULATOR_MANGO_04} Start"
            sh "Sleep 30"
         // script{
         //    echo "staring 2 ios emu on mac06...." 
         //    sh "curl http://10.88.9.69:5100/start_maknet_ios"
         // }
         }
      }
      stage('Run Test') {
         when {
            expression { params.RUN_ON_BROWSER_STACK == false }
         }
         steps {
            script{
                  // response = sh(script: '''curl --header "Content-Type: application/json" \
                  //                --header "Authorization: Bearer ${RP_UUID}" \
                  //                --request POST \
                  //                --data '{"name":"maknet-appium","description":"iOS Local","startTime":"'$(date +%s)000'","mode":"DEFAULT","attributes":[{"key":"build","value":"0.1"},{"value":"test"}]}' \
                  //                ${RP_ENDPOINT}/api/v1/maknet-appium/launch | jq -r .id''' ,
                  //          returnStdout: true).trim()
                  String retryprefix = "--prerunmodifier DataDriver.rerunfailed:output.xml  --output rerun.xml -r rerunreport.html"
                  echo "testing against version : iOS${APP_VERSION}.app"

               try{
               sh "pabot --pabotlib --pabotlibport 0 --processes 3 --resourcefile ./resources/devices/ios_farm_value_set.dat -v doppio_farm:True -v platform:ios -v app:'/Users/doppiotech/Documents/MaknetApp/iOS/${APP_VERSION}/MakroMangoApp.app'  -v browserstack:False -i ${env.INCLUDE} -e ${env.EXCLUDE} -v lang:th ./tests/mobile"
               sh 'echo "finish running 1st round"'
               }
               catch (err) {       //if test failed
                     def max_retry = 1
                  def needRetry = true
                  for(int i =0; i<max_retry; i++){
                        if (needRetry){
                        try{
                           echo "Running retry logic ${i}"
                           sh "pabot --pabotlib --pabotlibport 0 --processes 3 --resourcefile ./resources/devices/ios_farm_value_set.dat ${retryprefix} -v app:'/Users/doppiotech/Documents/MaknetApp/iOS/${APP_VERSION}/MakroMangoApp.app' -v doppio_farm:True -v platform:ios  -v browserstack:False -v lang:th ./tests/mobile"
                           needRetry = false
                        }
                        catch (err2){
                           echo "Nothing need to implement"
                        }
                  
                        try{
                           sh 'rebot -r final_report -o final_report --merge output.xml  rerun.xml'
                        }
                        catch (err3) {
                           echo "Nothing need to implement"
                        }
                        try {
                           sh """
                           echo 'Merged result done'
                           mv report.html ${i}_report.html
                           mv output.xml ${i}_output.xml
                           mv final_report.xml output.xml
                           mv final_report.html report.html
                           echo 'Rename result done'
                           """
                        }
                        catch (err4){
                           echo "nothing to rename"
                        }
                  }
                  }
               } 
            robot(
               outputPath: './',
               outputFileName: 'output.xml',
               reportFileName: 'report.html',
               logFileName: 'log.html',
               disableArchiveOutput: false,
               passThreshold: 100.0,
               unstableThreshold: 100.0,
               otherFiles: '*.png,*.jpg'
            )  
            script {
               String prefix = ":white_check_mark:"
               env.ROBOT_MAKNET = sh(script: "python3 ./resources/library/tags.py output.xml", returnStdout: true).trim()
               echo env.ROBOT_MAKNET
               if (tm('${ROBOT_FAILED}').toInteger() > 0) {
                  prefix = ":firecracker:"
               }
               String robotlog = tm('${BUILD_URL}/robot/report/log.html')
               echo "${robotlog}"
               slackSend(channel: "#makro-mini", 
                      message:  "${prefix}  ${JOB_NAME}  #${BUILD_NUMBER} \n *VERSION* : MangoAppiOS_${env.APP_VER} \n *INCLUDED* : ${env.INCLUDE} \n ${ROBOT_MAKNET} \n after ${currentBuild.durationString} \n (<${robotlog}|Report>)")
            // slackSend(tokenCredentialId: "makro_siammakroprojecto2o_token", 
            //       teamDomain: "siammakroprojecto2o", 
            //       channel: "#mango-qa-automate-noti", 
            //       message:  "${prefix}  ${JOB_NAME}  #${BUILD_NUMBER} \n *VERSION* : MangoAppiOS_${env.APP_VER} \n *INCLUDED* : ${env.INCLUDE} \n ${ROBOT_MAKNET} \n after ${currentBuild.durationString} \n (<${robotlog}|Report>)")
            }
         }
      }
         post {
            always {      
            script {
                  if ("${JOB_NAME}" == "Makro_Click/makro_pro_ios") {
                     common = load "./jenkinsfiles/common.groovy"
                     common.notify_result_to_dumbledore_v2("${WORKSPACE}/report.html","${WORKSPACE}/output.xml")
                     common.doppio_report()
                  }
               }               
            script{
               try {
                  echo "Stoping all iOS emulator"
                  sh label: '', script: 'xcrun simctl shutdown all'
               } catch (err) {
                  echo "kill : not enough arguments"
               }
            }

            script{
               try {
                  echo "Stoping all iOS emulator"
                  sh label: '', script: 'xcrun simctl shutdown all'
               } catch (err) {
                  echo "kill : not enough arguments"
               }
            }
            // script{
            // echo "stop 2 ios emu on mac69...." 
            // sh "curl http://10.88.9.69:5100/stop_maknet_ios"
            // }
               echo "Clean Workspace"
               cleanWs()
            }
         }
      }
      stage('Run Test On Browserstack') {
         when {
            expression { params.RUN_ON_BROWSER_STACK == true }
         }
         steps {
            script {
               response = sh(script: '''curl --header "Content-Type: application/json" \
                                                --header "Authorization: Bearer ${RP_UUID}" \
                                                --request POST \
                                                --data '{"name":"maknet-appium","description":"iOS Browserstack","startTime":"'$(date +%s)000'","mode":"DEFAULT","attributes":[{"key":"build","value":"0.1"},{"value":"test"}]}' \
                                                ${RP_ENDPOINT}/api/v1/maknet-appium/launch | jq -r .id''' ,
                                          returnStdout: true).trim()
               String retryprefix = "--prerunmodifier DataDriver.rerunfailed:output.xml  --output rerun.xml -r rerunreport.html"
               try {
                  sh "/Users/bit1/Downloads/BrowserStackLocal --key AqBaFNqaqEp79cgoyGyc --daemon start"
                  sh "pabot --pabotlib --pabotlibport 0 --processes 2 --listener robotframework_reportportal.listener --variable RP_UUID:${RP_UUID} --variable RP_ENDPOINT:${RP_ENDPOINT} --variable RP_LAUNCH:${RP_LAUNCH} --variable RP_LAUNCH_UUID:'${response}' --variable RP_PROJECT:${RP_PROJECT} -v doppio_farm:False -v browserstack:True -v platform:ios -i ${params.INCLUDE} -e ${params.EXCLUDE} ./tests/mobile"
               }
               catch (err) {       //if test failed
                  def max_retry = 1
                  def needRetry = true
                  for(int i =0; i<max_retry; i++){
                        if (needRetry){
                        try {
                           echo "Running retry logic ${i}"
                           sh "pabot --pabotlib --pabotlibport 0 --processes 2 --listener robotframework_reportportal.listener --variable RP_UUID:${RP_UUID} --variable RP_ENDPOINT:${RP_ENDPOINT} --variable RP_LAUNCH:${RP_LAUNCH} --variable RP_LAUNCH_UUID:'${response}' --variable RP_PROJECT:${RP_PROJECT} -v doppio_farm:False -v browserstack:True -v platform:ios ${retryprefix} ./tests/mobile"
                           needRetry = false
                        }
                        catch (err2){
                           echo "Nothing need to implement"
                        }
                  
                        try {
                           sh "/Users/bit1/Downloads/BrowserStackLocal --key AqBaFNqaqEp79cgoyGyc --daemon stop"
                           sh 'rebot -r final_report -o final_report --merge output.xml  rerun.xml'
                        }
                        catch (err3) {
                           echo "Nothing need to implement"
                        }
                        try {
                           sh """
                           echo 'Merged result done'
                           mv report.html ${i}_report.html
                           mv output.xml ${i}_output.xml
                           mv final_report.xml output.xml
                           mv final_report.html report.html
                           echo 'Rename result done'
                           """
                        }
                        catch (err4){
                           echo "nothing to rename"
                        }
                  }
                  }
               }
               robot(
                  outputPath: './',
                  outputFileName: 'output.xml',
                  reportFileName: 'report.html',
                  logFileName: 'log.html',
                  disableArchiveOutput: false,
                  passThreshold: 100.0,
                  unstableThreshold: 100.0,
                  otherFiles: '*.png,*.jpg'
               )
               script {
                  String prefix = ":white_check_mark:"
                  env.ROBOT_MAKNET = sh(script: "python3 ./tags.py output.xml", returnStdout: true).trim()
                  echo env.ROBOT_MAKNET
                  if (tm('${ROBOT_FAILED}').toInteger() > 0) {
                     prefix = ":firecracker:"
                  }
                  String robotlog = tm('${BUILD_URL}/robot/report/log.html')
                  echo "${robotlog}"
                  slackSend(channel: "#maknet-code-review", 
                      message:  "${prefix}  ${JOB_NAME}  #${BUILD_NUMBER} \n *VERSION* : MangoAppiOS_${env.APP_VER} \n *INCLUDED* : ${env.INCLUDE} \n ${ROBOT_MAKNET} \n after ${currentBuild.durationString} \n (<${robotlog}|Report>)")
                  slackSend(tokenCredentialId: "makro_siammakroprojecto2o_token", 
                     teamDomain: "siammakroprojecto2o", 
                     channel: "#mango-qa-automate-noti", 
                     message:  "${prefix}  ${JOB_NAME}  #${BUILD_NUMBER} \n *VERSION* : MangoAppiOS_${env.APP_VER} \n *INCLUDED* : ${env.INCLUDE} \n ${ROBOT_MAKNET} \n after ${currentBuild.durationString} \n (<${robotlog}|Report>)")
               }
            //    if ("${JOB_NAME}" == "maknet_m1_job/Maknet_iOS_M1_Pre_Purchase") {
            //       script {
            //          try {
            //             // -- Download GIT Code Dumbledore 
            //          echo "Downloading GIT Code from: ${JOB_GIT_URL}. Branch: ${JOB_GIT_BRANCH}"
            //          checkout([$class: "GitSCM", branches: [[name: "${JOB_GIT_BRANCH}"]], doGenerateSubmoduleConfigurations: false, 
            //          extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${GIT_CREDENTIAL}", 
            //          url: "${JOB_GIT_URL}"]]])
            //       } catch (err) { 
            //         echo "The Download GIT Code Stage failed"
            //       }
            //       sh 'python3 ./robotframework_parser.py  "${JOB_NAME}"'
            //    }
            // }
            }
         }
         post {
            always {        
               echo "Clean Workspace"
               cleanWs()
            }
         }
      }
}
}

